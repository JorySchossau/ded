

#include <algorithm>
#include <iostream>
#include <fstream>
#include <numeric>
#include <string>
#include <string_view>
#include <vector>
#include <random>
#include <regex>

int main() {

  std::map<std::string, std::vector<std::string>> build_options;
  std::ifstream cfg("components.cfg");

  std::regex r(R"(^\s*(experiment|entity|selector)\s*:\s*(\w+)\s*$)");
  for (std::string line; std::getline(cfg,line);) {
  	  std::smatch m;
	if (std::regex_match(line,m,r))
		build_options[m[1]].push_back(m[2]);
  }
  cfg.close();
	  
  std::ofstream header("components.cpp");

  header << "\n// Auto generated by "
            "component_builder.cpp\n\n#include\"components.h\"\n\n";
 
  for (auto &[type, names] : build_options)
    for (auto &name : names) 
      header << "#include\"user/" << type << "/" << name << ".h\"\n";
	
  header << "\n#include<string_view>\n\nnamespace life {\n\n";

  for (auto &[type, names] : build_options) {
    header << type << " make_" << type << "(std::string_view choice) {\n";
    for (auto &name : names)
      header << "  if (choice == \"" << name << "\")\n    return " << name
             << "();\n";
    header << "  std::cout << \"unknown-" << type
           << ": \" << choice;\n  exit(1);\n}\n\n";
  }

  for (auto &[type, names] : build_options) {
    header << "std::vector<std::string> " << type << "_list() {\n  return {";
    std::string vec_list;
    for (auto &name : names)
      vec_list += "\"" + name + "\",";
    vec_list.pop_back();
    header << vec_list << "};\n}\n\n";
  }
  header << "}\n";
  header.close();
}

